{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/posts/porting-to-flexmark",
    "result": {"data":{"markdownRemark":{"html":"<p>kMD2PDF now finally uses <a href=\"https://github.com/vsch/flexmark-java\">FlexMark</a> as the back end for the markdown to html\nconversion. This is a big moment as now a lot more flexibility has been introduced for the library and that means more\nfeatures.</p>\n<p>Following my promise of making smaller and more frequent release updates, this port has ushered in version <code class=\"language-text\">0.2.1</code> of\nkMD2PDF and I'm really excited!</p>\n<h2 id=\"changelog\" style=\"position:relative;\"><a href=\"#changelog\" aria-label=\"changelog permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changelog</h2>\n<ul>\n<li>Backend library using flexmark</li>\n<li>Unit testing framework set up for testing node rendering</li>\n<li>Task list items now supported</li>\n</ul>\n<h2 id=\"original-design\" style=\"position:relative;\"><a href=\"#original-design\" aria-label=\"original design permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Original design</h2>\n<p>Originally, the library used commonmark to handle <code class=\"language-text\">.md</code> to <code class=\"language-text\">.html</code> conversions, but it was severely limited as the\nnumber of useful extensions was severely lacking and it resulting in a terrible codebase. However, with FlexMark, this\nproblem is alleviated as it has all the features I need.</p>\n<h2 id=\"hiccups\" style=\"position:relative;\"><a href=\"#hiccups\" aria-label=\"hiccups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hiccups</h2>\n<p>There was a slight hiccup with the port as the <code class=\"language-text\">.html</code> to <code class=\"language-text\">.pdf</code> library,\n<a href=\"https://github.com/flyingsaucerproject/flyingsaucer\">flyingsaucer</a> would not accept the HTML output produced by\nFlexMark. So I had to make use of Jsoup to parse the output of FlexMark to become valid XML that the flyingsaucer\nlibrary would accept.</p>\n<p>Another issue faced is the node renderers and visitors. In commonmark, these node renderers were a single class that\nwould be added the parser\n(seen <a href=\"https://github.com/atlassian/commonmark-java#customize-html-rendering\">here</a>) and visitors would be accepted\nafter the document is parsed\n(seen <a href=\"https://github.com/atlassian/commonmark-java#use-a-visitor-to-process-parsed-nodes\">here</a>). This made it really\neasy to create custom node renderers and visitors which were used for figure generation and table of contents\nprocessing. However, with FlexMark, due to the increase in flexibility, the overhead for creating both increased as\nwell and this resulted in requiring a parsing extension to be created, which would create a custom NodeRenderingFactory\nwhich in turn be responsible for creating custom NodeRenderers to render the needed node, which in this case was the\nfigure elements. Whilst this may seem all complicated, it was actually outlined in their sample\n<a href=\"https://github.com/vsch/flexmark-java/blob/master/flexmark-java-samples/src/com/vladsch/flexmark/samples/NodeRendererSample.java\">repository</a> where I was able to successfully create the figure renderer\n<a href=\"https://github.com/omnius-project/kMD2PDF/tree/master/src/main/kotlin/com/github/woojiahao/modifiers/figure\">here.</a></p>\n<p>The table of content processor was similar in nature. Due to the increased flexibility offered by FlexMark, additional\nsteps had to be taken to create a visitor to properly create the table of contents. This highlighted the idea that\ndeveloping flexible software would often entail having to increase the overhead of the software because it just takes\nthat many extra steps to provide that flexibility.</p>\n<h2 id=\"unit-testing-the-dom\" style=\"position:relative;\"><a href=\"#unit-testing-the-dom\" aria-label=\"unit testing the dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unit testing the DOM</h2>\n<p>I also worked on attempting to create a system to unit test the node rendering aspect of the library since there can be\na lot of edge cases involved with markdown and it might be useful to have an automated system to be able to ensure that\nthe code is reliable and performs within my range of expectation.</p>\n<p>I tried to design this API to be as seamless as possible, reducing the moving parts exposed to the user so that they\nwould not have to fiddle with too many configurations to get it working. What I came up with was rather interesting.\nTo ensure that the rendering was correct, I had to first find a way to test that the converted markdown file would\nproduce a certain result. To do so, I exposed the HTML conversion process of <code class=\"language-text\">MarkdownConverter</code> to be able to hook\ninto this using the API.</p>\n<p>The essence of the API is to compare the processed HTML and an expected HTML input using Jsoup to ensure that the they\nare the same. This required some basic recursion to assert that every single node matched.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">assertMarkdown</span><span class=\"token punctuation\">(</span>folder<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> file<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\".\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"File should not include extensions as they are added within the method\"</span></span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">val</span> markdownFileName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">file</span></span><span class=\"token string\">.md\"</span></span>\n  <span class=\"token keyword\">val</span> htmlFileName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">file</span></span><span class=\"token string\">.html\"</span></span>\n\n  <span class=\"token keyword\">val</span> markdownFile <span class=\"token operator\">=</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>folder<span class=\"token punctuation\">,</span> markdownFileName<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> htmlFile <span class=\"token operator\">=</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>folder<span class=\"token punctuation\">,</span> htmlFileName<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">val</span> converter <span class=\"token operator\">=</span> <span class=\"token function\">setupConverter</span><span class=\"token punctuation\">(</span>markdownFile<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">val</span> expectedDocument <span class=\"token operator\">=</span> <span class=\"token function\">parseDocument</span><span class=\"token punctuation\">(</span>htmlFile<span class=\"token punctuation\">.</span><span class=\"token function\">readText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> actualDocument <span class=\"token operator\">=</span> \n    <span class=\"token function\">parseDocument</span><span class=\"token punctuation\">(</span>converter<span class=\"token punctuation\">.</span><span class=\"token function\">generateBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClass</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"content\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Ensure that they both have the same number of children</span>\n  <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>expectedDocument<span class=\"token punctuation\">.</span>childCount<span class=\"token punctuation\">,</span> actualDocument<span class=\"token punctuation\">.</span>childCount<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Ensure that they both have the same set of elements</span>\n  <span class=\"token keyword\">val</span> expectedDocumentBody <span class=\"token operator\">=</span> expectedDocument<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> actualDocumentBody <span class=\"token operator\">=</span> actualDocument<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  expectedDocumentBody<span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>actualDocumentBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see, the markdown file will be the actual output produced by the library whilst the html file represents the\nexpected output.</p>\n<p>This was the bulk of the API, with the recursive function looking like:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>ex<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">,</span> ac<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">assertElementEquals</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> ac<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>childCount <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> until ex<span class=\"token punctuation\">.</span>childCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">child</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">child</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This allows the users to simply execute the <code class=\"language-text\">assertMarkdown()</code> function, providing the resource folder and resource name\nof the markdown file and html file. This would set in motion an automated set of testing to ensure that every aspect\nof the generated markdown file would produce the appropriate html.</p>\n<p>One limitation that is present with the API is that the file name of the markdown file and html file would have to be\nthe same, otherwise the assert function would fail. That said, it also encourages for developers trying to use the API\nto always stick to the same name for their markdown and html file, which reduces confusion.</p>","frontmatter":{"title":"Porting to FlexMark","date":"08 April 2019","description":"Adopting FlexMark into kMD2PDF - a markdown to PDF converter","tags":["reflection","migration","Kotlin","markdown","PDF","kMD2PDF","unit testing"]},"fields":{"slug":"/blog/posts/porting-to-flexmark"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/blog/posts/lessons-on-software-release"},"frontmatter":{"title":"Lessons on software release","published":true}}},{"node":{"fields":{"slug":"/blog/posts/using-delegate-properties"},"frontmatter":{"title":"Applications of Kotlin's delegate properties","published":true}}}]}},"pageContext":{"slug":"/blog/posts/porting-to-flexmark","next":"/blog/posts/using-delegate-properties","prev":"/blog/posts/lessons-on-software-release"}},
    "staticQueryHashes": ["2068778362","2207116114"]}