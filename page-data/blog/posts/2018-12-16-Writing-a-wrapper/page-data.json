{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/posts/2018-12-16-Writing-a-wrapper","result":{"data":{"markdownRemark":{"html":"<p>During my first semester of my second year in Polytechnic, I began writing a simple wrapper for the <a href=\"https://developer.spotify.com/documentation/web-api/quick-start/\">Spotify Web API</a> as I was interesting in the process of developing a\nlibrary for other developers to use and this was something that I saw as an opportunity. </p>\n<h3>Different thinking process</h3>\n<p>It was incredibly refreshing to write a something with developers in mind, rather than focussing on clients who might\nnot know anything about programming. It introduced a completely different set of thinking as I had to think about how\nother developers would like to use the library I write, and whether the API I present to them is intuitive.</p>\n<p>For instance, when thinking about introducing asynchronous calls to my library, I decided to make use of callbacks.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processArtist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span><span class=\"token function\">getSingleArtist</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0OdUWJ0sBjDrqHygGUXeCF\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeAsync</span><span class=\"token punctuation\">(</span>artist <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got Artist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>artist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This was something that I personally would have enjoyed using and thus I decided to stick with this design.</p>\n<h4>Builder pattern</h4>\n<p>The library is built on top of the <a href=\"https://dzone.com/articles/design-patterns-the-builder-pattern\">Builder pattern</a>.\nThis was a design choice because even if the library was written in Kotlin, it was aimed at Java developers and certain\nlanguage constructs (like optional arguments and named arguments) were simply not available to Java, so I decided to\noptimize the library to work with Java code and to reduce redundant repetitions of nulls for parameters that are not\nneeded.</p>\n<h3>Leveraging generics</h3>\n<h4>Mistakes were made...</h4>\n<p>I also learnt to properly utilize generics when creating a parent class so as to reduce the overhead needed when creating\nsub-classes. Prior to this \"discovery\" I had designed the parent class as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> AbstractQuery <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Any\n\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">executeAsync</span><span class=\"token punctuation\">(</span>callback<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Any<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    thread <span class=\"token punctuation\">{</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This made it so any child class would implement the parent class in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> GetArtistQuery <span class=\"token operator\">:</span> <span class=\"token function\">AbstractQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Artist <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Whilst this allowed me to return anything, it also meant that the code was not type safe, so if a developer were to use\nthe <code class=\"language-text\">executeAsync()</code> method, he/she would have to be aware of the type of that the <code class=\"language-text\">execute()</code> method returns to be able\nto cast the input of the callback, which could cause problems if I (as the designer of the library) failed to properly\nspecify the specific return type of the <code class=\"language-text\">execute()</code> method, resulting in an overall poor experience using the library.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processArtist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span><span class=\"token function\">getSingleArtist</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0OdUWJ0sBjDrqHygGUXeCF\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeAsync</span><span class=\"token punctuation\">(</span>artist <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got Artist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Artist</span><span class=\"token punctuation\">)</span> artist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Lessons were learnt...</h4>\n<p>With generics, I managed to have a type safe way of writing each child query, preventing developers working on the\nlibrary code and developers using the library from making stupid mistakes.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> AbstractQuery<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T\n\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">executeAsync</span><span class=\"token punctuation\">(</span>callback<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    thread <span class=\"token punctuation\">{</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> GetArtistQuery <span class=\"token operator\">:</span> AbstractQuery<span class=\"token operator\">&lt;</span>Artist<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Artist <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processArtist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span><span class=\"token function\">getSingleArtist</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0OdUWJ0sBjDrqHygGUXeCF\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeAsync</span><span class=\"token punctuation\">(</span>artist <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got Artist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// artist is already going to be of type: Artist</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>artist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Using varargs</h3>\n<p>When designing the endpoint system, I realized that it would be tedious to store the endpoints in the parent class and\nmemorizing which ones to call for each query. Using <code class=\"language-text\">varargs</code> to construct each endpoint also allowed me to reference\nthe endpoint without having to memorize some unique name that was given in a parent class, effectively reducing the\noverhead needed.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> AbstractQuery<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">vararg</span> pathSegments<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> GetArtistQuery <span class=\"token keyword\">private</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> accessToken<span class=\"token operator\">:</span> String\n  <span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> artistId<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> AbstractQuery<span class=\"token operator\">&lt;</span>Artist<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"artists\"</span><span class=\"token punctuation\">,</span> artistId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>APIs</h3>\n<h4>HTTP requests</h4>\n<p>I had also learnt a great deal about HTTP requests, namely the different types of requests and how different headers\nwould influence the results of the request. Prior to the making of the wrapper, I had a basic understanding of HTTP,\nsimply understanding that if I wanted to make a call to the API, I would need to specify the request to an endpoint of\nthe API with a HTTP request type.</p>\n<h4>OAuth process</h4>\n<p>I also learnt a lot about OAuth as that was the method of authentication the API used to authenticate users. I learnt\nabout the various components of OAuth and the benefits to using it.</p>\n<p><a href=\"https://oauth.net/articles/authentication/\">Reading material I used.</a></p>\n<h3>Building custom tools</h3>\n<p>In the process of writing the wrapper, the benefits of writing custom tools to assist the development process became\nprevalent. I noticed that I would often have to manually manage the API token and that would become tedious since it\nresets every hour and having to manually manage it meant that I would have to run a separate instance of the library\nthat handles this. </p>\n<p>So I decided to spend a day to design the <a href=\"https://github.com/woojiahao/spotify-access-token-generator\">Access Token Generator</a>\ntool to help me generate and manage the access token, as well as facilitate the authentication process for the user,\ngreatly improving my development speed.</p>\n<h3>Conclusion</h3>\n<p>I learnt to better utilize language features that Kotlin had to offer, think about the design of the library so that\nit is easiest to use by the target developers. I also brushed up on my understanding of web services and how APIs\noperated. I also built custom tools to improve my life as a developer. All in all, it was an incredibly fruitful\nexperience.</p>\n<ul>\n<li><a href=\"https://github.com/woojiahao/java-spotify-wrapper\">Library (in beta)</a></li>\n<li><a href=\"https://github.com/woojiahao/spotify-access-token-generator\">Access token generator</a></li>\n</ul>","frontmatter":{"title":"Writing a wrapper","date":"16 December 2018"},"fields":{"slug":"/blog/posts/2018-12-16-Writing-a-wrapper"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/blog/posts/2018-11-26-Java-Generics"},"frontmatter":{"title":"An investigation into generics in Java","published":true}}},{"node":{"fields":{"slug":"/blog/posts/2019-02-24-Introducing-Omnius"},"frontmatter":{"title":"Introducing Omnius","published":true}}}]}},"pageContext":{"slug":"/blog/posts/2018-12-16-Writing-a-wrapper","next":"/blog/posts/2019-02-24-Introducing-Omnius","prev":"/blog/posts/2018-11-26-Java-Generics"}}}