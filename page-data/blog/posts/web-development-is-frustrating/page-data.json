{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/posts/web-development-is-frustrating",
    "result": {"data":{"markdownRemark":{"html":"<p>I have been working with Electron for the past two months or so -- buildilng\n<a href=\"https://github.com/woojiahao/apollo\">Apollo</a> (open-source RSS aggregator). And working with Electron meant I had to\nwork with the Javascript ecosystem.</p>\n<p>And boy is the Javascript ecosystem a confusing beast. From trying to bundle Electron via Webpack, to installing React,\nto getting hot reloading to work, everything has been a hassle.</p>\n<p>To give even more context, lately, I had finalized the majority of the core functionality of Apollo -- which included\nthings like adding a new feed, and bookmarking feeds. I wanted to polish the application and so I started to modifying\nthe styles of the React components. However, as I hadn't setup Electron to allow for hot reloading of the\n<a href=\"https://www.electronjs.org/docs/latest/tutorial/process-model\">renderer</a>, it was taking minutes to build and render\nthe changes. This was not very economical as I could be changing a single text color and have to wait minutes to view\nthe changes.</p>\n<p>So, I did what any sensible developer would do and look for ways to hot reload an Electron app. I stumbled upon\n<code class=\"language-text\">electron-reloader</code> and tried it out. No dice. Apparently, it did not work really well with Webpack + React.</p>\n<p>So, I tried the next best thing, using a pre-packed Webpack plugin for <code class=\"language-text\">electron-reloader</code>. Again, no dice. The changes\nsimply were not rendering.</p>\n<p>Exasperated, I decided re-writing my Webpack to use <code class=\"language-text\">electron-webpack</code> as it had promised hot reloading out-of-the-box.\nBut this time, I could not get my existing Webpack configurations to work. <code class=\"language-text\">electron-webpack</code> was simply too abstract\nfor my liking.</p>\n<p>The same happened with <code class=\"language-text\">electron-forge</code>.</p>\n<p>Frustrated with the lack of flexibility and documentation for both <code class=\"language-text\">electron-webpack</code> and <code class=\"language-text\">electron-forge</code>, I decided to\nroll my own \"minimal\" Electron setup.</p>\n<p>I decided to hardcode the tech stack to be Typescript, React, Tailwind.CSS, and TypeORM. This was the stack that was\nalready working for me with Apollo and I did not want to rewrite Apollo.</p>\n<p>So, I started reading the documentation and looking at various posts about setting up these tools. I cannot express just\nhow many times I would follow a guide to the tee and have some random error message appear because the tutorial was like\nthree months old.</p>\n<p><em>THREE MONTHS</em></p>\n<p>Only in Javascript will you get breaking changes by following a three-month old article...</p>\n<p>I was pulling my hair at the multitude of errors with just setting up Webpack to work with every single technology. The\nimplementation of Apollo was never a trouble, but the setup was the one giving me the most amount of problems...</p>\n<p>Finally, after nearly eight hours of repeated trial and error and constant Google-fu, I finally got the minimal setup\nworking.</p>\n<p>I think this experience really speaks to the almost tragic state of Javascript. Everything is moving so quickly that\nthree-month old articles can go obsolete. Tools are so abstracted that it's almost impossible to make flexible decisions\nwithout needing to pull everything apart. There are so many tools that perform the same operation but differ ever so\nslightly that using one over the other would cause red errors to fill your screen. And yet, we are recommending web\ndevelopment as a \"beginner\" domain. Sure, having opinionated tooling can make it easy to start out with -- but staying\nwithin the confines and diction of each opinion can become stifling and frustrating.</p>\n<p>Sure this whole process has been eye-opening and has taught me a lot about Webpack and Babel. But maybe it's just me, but\nI think that development should be less about confusing setup about standards and more on actually developing a product\nthat matters. I just feel that time could have been better invested elsewhere if the ecosystem and tooling was a lot more\ncohesive and complete.</p>\n<p>I know my new \"minimal\" Electron setup is contributing to the problem, but for me, working with the tools at the most\nfundamental level -- away from the abstracted nonsense -- is the easiest way for me to get something working.</p>\n<p><img src=\"https://imgs.xkcd.com/comics/standards.png\" alt=\"Standards\"></p>\n<p>In case you are interested, my \"minimal\" Electron setup can be found <a href=\"https://github.com/woojiahao/minimal-electron\">here.</a></p>","frontmatter":{"title":"Web Development is Frustrating","date":"21 December 2021","description":"Working on Apollo has made me realize that web development and the general Javascript ecosystem is frustrating to work with. This is a rant on trying to understand the multitude of configurations and setup required to create a web development project in 2021.","tags":["electron","webpack","typescript","typeorm","react","tailwind","boilerplate","rant"]},"fields":{"slug":"/blog/posts/web-development-is-frustrating"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/blog/posts/installing-uxplay-on-arch-linux"},"frontmatter":{"title":"Installing UxPlay on Arch Linux","published":true}}},{"node":{"fields":{"slug":"/blog/posts/open-source-deep-dive-broadway-part-2"},"frontmatter":{"title":"Open-source Deep Dive: Broadway (Part 2) - Inner workings of Broadway","published":true}}}]}},"pageContext":{"slug":"/blog/posts/web-development-is-frustrating","next":"/blog/posts/installing-uxplay-on-arch-linux","prev":"/blog/posts/open-source-deep-dive-broadway-part-2"}},
    "staticQueryHashes": ["2068778362","2207116114"]}