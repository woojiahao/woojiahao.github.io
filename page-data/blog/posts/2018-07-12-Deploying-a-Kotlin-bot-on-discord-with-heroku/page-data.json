{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/posts/2018-07-12-Deploying-a-Kotlin-bot-on-discord-with-heroku","result":{"data":{"markdownRemark":{"html":"<h2>Why this post?</h2>\n<p>Whilst there are tutorials for Java apps to be hosted on Heroku, I couldn't find one specifically for hosting a discord bot written in Java/Kotlin, so this will be used to supplement that gap.</p>\n<h2>What is Heroku?</h2>\n<p>According to the <a href=\"https://www.heroku.com/what\">Heroku</a> page:</p>\n<blockquote>\n<p>Heroku is a cloud platform that lets companies build, deliver, monitor and scale apps â€” we're the fastest way to go from idea to URL, bypassing all those infrastructure headaches.</p>\n</blockquote>\n<p>We will be using Heroku as it has a free tier that doesn't require any credit card number at all, unlike other cloud platforms like AWS or DigitalOcean. </p>\n<h2>Pre-requisites</h2>\n<ol>\n<li>Git </li>\n<li>Maven</li>\n<li>Discord Bot written in Java/Kotlin</li>\n</ol>\n<p>The discord bot should ideally be using maven as that will be tool that will be used to generate the <code class=\"language-text\">.jar</code> file that will be used to run your bot.</p>\n<p>For this tutorial, I will be supplying a sample Bot written in <a href=\"https://kotlinlang.org/\">Kotlin</a> as well as it's <code class=\"language-text\">pom.xml</code> file.</p>\n<p>The Java library that I have chosen to use as my Discord wrapper is the JDA library, you can learn about it <a href=\"https://github.com/DV8FromTheWorld/JDA\">here</a>.</p>\n<p>Also, I have included the plugins for the project to be exported as a <code class=\"language-text\">.jar</code> file. To obtain the <code class=\"language-text\">.jar</code> file. Run the following command in the project's folder to run the bot.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">mvn clean <span class=\"token function\">install</span>\n<span class=\"token builtin class-name\">cd</span> target\njava -jar <span class=\"token operator\">&lt;</span>jar_name<span class=\"token operator\">></span>.jar</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Sample Bot: <a href=\"https://gist.github.com/woojiahao/38f33e20ed5f30862f428e102da0b0af\">https://gist.github.com/woojiahao/38f33e20ed5f30862f428e102da0b0af</a></p>\n<p>Sample pom.xml: <a href=\"https://gist.github.com/woojiahao/7512b8ab6c082f6cec164026c3f4a2cd\">https://gist.github.com/woojiahao/7512b8ab6c082f6cec164026c3f4a2cd</a></p>\n<h2>Using Heroku</h2>\n<h3>Step 1: Downloading Heroku</h3>\n<p>You will have to install Heroku onto your machine to execute the following commands in the command line. You can find the installation file for Heroku <a href=\"https://devcenter.heroku.com/articles/heroku-cli\">here</a>.</p>\n<p>To test that you have successfully installed Heroku, use the command <code class=\"language-text\">heroku --version</code>. My version of Heroku is <code class=\"language-text\">heroku-cli/6.15.28-6b9662e (win32-x64) node-v9.3.0</code>.</p>\n<p>Once you have successfully installed Heroku onto your machine, you can proceed.</p>\n<h3>Step 2: Publishing your bot to GitHub</h3>\n<p>Create an empty repository on GitHub.</p>\n<p>Then navigate to your project folder on your local machine. After that, type the following commands into the command line.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Initial commit\"</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/<span class=\"token operator\">&lt;</span>github repository url<span class=\"token operator\">></span>\n<span class=\"token function\">git</span> push -u origin master</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>These steps are the standard steps when adding an existing local repository onto GitHub.\nRefresh your repository page and you should see your files being added to the repository. </p>\n<h3>Step 3: Set up Heroku</h3>\n<p>After your project files have been added to GitHub, you can begin setting up Heroku.</p>\n<p>Within your project folder, enter the following commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">heroku create</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Heroku will now create a new remote for your project to their Git repositories. Pushing changes to this repository will update the exisiting bot. You can view this remote using:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote -v</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>Step 4: Creating a Procfile</h3>\n<p>When you run <code class=\"language-text\">mvn clean install</code>, a <code class=\"language-text\">.jar</code> will be created in the <code class=\"language-text\">target</code> folder. We will be running this <code class=\"language-text\">.jar</code> file to start the bot. </p>\n<p>Create a new file called <code class=\"language-text\">Procfile</code> and inside of it, include the following line:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">worker: java -jar target/&lt;jar_name&gt;.jar</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The command in this file will be run whenever you push changes to the <code class=\"language-text\">heroku</code> remote and this command specifically will execute the <code class=\"language-text\">.jar</code> file as a worker dyno. You can read more about Heroku dynos <a href=\"https://www.heroku.com/dynos\">here</a>. </p>\n<h3>Step 5: Configuring bot token</h3>\n<p>A Discord bot requires a token in order for the bot to run, you can obtain this bot token when you make a new Discord bot from the Discord developer dashboard. However, you do not want to expose your token on your own repository, so we will make use of Heroku <a href=\"https://devcenter.heroku.com/articles/config-vars\">Environment Variables</a>. We will add our bot's token as an environment variable and use Java's <code class=\"language-text\">System.getenv()</code> method to retrieve this value.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">heroku config:set <span class=\"token assign-left variable\">BOT_TOKEN</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>bot_token<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Inside the <code class=\"language-text\">Bot.kt</code> file, replace the string in <code class=\"language-text\">setToken()</code> to the <code class=\"language-text\">BOT_TOKEN</code>, as such</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BOT_TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>Step 6: Running Heroku</h3>\n<p>After configuring everything, commit all the changes to your project, and push it to both the <code class=\"language-text\">origin</code> remote (your own repository) and the <code class=\"language-text\">heroku</code> remote (Heroku's repository). If you encounter a problem with pushing to the <code class=\"language-text\">heroku</code> remote, use the command <code class=\"language-text\">heroku logs --tail</code> and find the latest error messages to debug any errors.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin master\n<span class=\"token function\">git</span> push -u heroku master</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>After pushing the changes, run the following command to activate the worker dyno:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">heroku ps:scale <span class=\"token assign-left variable\">worker</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>After doing so, push to the <code class=\"language-text\">heroku</code> remote again and your bot should go online.</p>\n<p>Test the bot by using <code class=\"language-text\">!ping</code> in the chat and ensure that the bot replies with <code class=\"language-text\">Pong</code>.</p>\n<h3>Step 7: Developing the bot</h3>\n<p>Everytime you make some changes to the bot, make sure you push those changes to both your own repository (<code class=\"language-text\">origin</code> remote) and the heroku's repository (<code class=\"language-text\">heroku</code> remote).</p>\n<h2>Conclusion</h2>\n<p>If you wish to learn more about hosting Java applications on Heroku, there are terrific guides online such as:</p>\n<p><a href=\"https://devcenter.heroku.com/articles/getting-started-with-java#introduction\">Getting Started on Heroku with Java</a></p>\n<p><a href=\"https://github.com/heroku/java-sample\">Java Sample (on GitHub)</a></p>","frontmatter":{"title":"Deploying Discord bots written in Kotlin on Heroku","date":"12 July 2018","description":"A guide to deploying JVM-based Discord bots on Heroku for free"},"fields":{"slug":"/blog/posts/2018-07-12-Deploying-a-Kotlin-bot-on-discord-with-heroku"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/blog/posts/2018-06-20-Learning-About-KML"},"frontmatter":{"title":"Breaking down KML files","published":true}}},{"node":{"fields":{"slug":"/blog/posts/2018-07-15-making-a-csv-to-database-tool"},"frontmatter":{"title":"Crafting a CSV to DB tool","published":true}}}]}},"pageContext":{"slug":"/blog/posts/2018-07-12-Deploying-a-Kotlin-bot-on-discord-with-heroku","next":"/blog/posts/2018-07-15-making-a-csv-to-database-tool","prev":"/blog/posts/2018-06-20-Learning-About-KML"}}}