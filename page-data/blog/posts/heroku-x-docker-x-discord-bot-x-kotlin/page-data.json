{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/posts/heroku-x-docker-x-discord-bot-x-kotlin","result":{"data":{"markdownRemark":{"html":"<p>You may be wondering what's up with the over the top, nearly fan-ship name, trust me, I was not on anything when I wrote this.</p>\n<p>I simply wanted to write about a playground project I had written to get Docker working with Heroku, specifically in the context of writing a Discord bot in Kotlin.</p>\n<p>I made a rather comprehensive guide to go with the project over on GitHub and I wish to share it here as well since it was a rather large milestone.</p>\n<p>If you wish to follow along, the sample project is found <a href=\"https://github.com/woojiahao/discord-docker\">here.</a></p>\n<p>The project uses Gradle as the build tool for the project.</p>\n<h2 id=\"running-the-docker-image\" style=\"position:relative;\"><a href=\"#running-the-docker-image\" aria-label=\"running the docker image permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running the Docker image</h2>\n<h3 id=\"local\" style=\"position:relative;\"><a href=\"#local\" aria-label=\"local permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local</h3>\n<p>If you're running the bot locally, you should use Docker to package the bot and run the Docker image created. This way, you can test your bot locally with the same environment as your server thanks to Docker!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> build -t discord-docker <span class=\"token builtin class-name\">.</span>\n$ <span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> <span class=\"token comment\"># Should see the image named \"discord-docker\"</span>\n$ <span class=\"token function\">docker</span> run -e <span class=\"token assign-left variable\">BOT_TOKEN</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>bot token<span class=\"token operator\">></span> -d discord-docker\n$ <span class=\"token function\">docker</span> container <span class=\"token function\">ls</span> <span class=\"token comment\"># Should see \"discord-docker running\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>With Docker, it is as simple as that to get the bot running.</p>\n<h3 id=\"heroku\" style=\"position:relative;\"><a href=\"#heroku\" aria-label=\"heroku permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heroku</h3>\n<p>If you're deploying the bot on Heroku, the steps are actually outlined in the documentation for Docker by Heroku. (<a href=\"https://devcenter.heroku.com/articles/build-docker-images-heroku-yml\">here</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ heroku stack:set container\n$ <span class=\"token function\">git</span> push heroku master</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>And watch as Heroku does its magic!</p>\n<h2 id=\"project-composition\" style=\"position:relative;\"><a href=\"#project-composition\" aria-label=\"project composition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project composition</h2>\n<h3 id=\"buildgradle\" style=\"position:relative;\"><a href=\"#buildgradle\" aria-label=\"buildgradle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">build.gradle</code></h3>\n<p>The <code class=\"language-text\">build.gradle</code> straightforward, with the use of the <code class=\"language-text\">shadowJar</code> plugin to create the fat jar required for all library dependency. In order to prevent the exported jar from having differing names, we set the <code class=\"language-text\">archiveName</code> attribute of the plugin to always use the name <code class=\"language-text\">bot.${extension}</code>.</p>\n<p>This means that even if we changed the version of the gradle file, the exported jar file is the same name so we don't need to modify our Dockerfile.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-groovy line-numbers\"><code class=\"language-groovy\">plugins <span class=\"token punctuation\">{</span>\n  id <span class=\"token string\">'org.jetbrains.kotlin.jvm'</span> version <span class=\"token string\">'1.3.41'</span>\n  id <span class=\"token string\">'com.github.johnrengelman.shadow'</span> version <span class=\"token string\">'5.0.0'</span>\n<span class=\"token punctuation\">}</span>\n\nsourceCompatibility <span class=\"token operator\">=</span> <span class=\"token number\">1.8</span>\ntargetCompatibility <span class=\"token operator\">=</span> <span class=\"token number\">1.8</span>\n\ngroup <span class=\"token string\">'com.github.woojiahao'</span>\nversion <span class=\"token string\">'1.0-SNAPSHOT'</span>\n\nrepositories <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://jitpack.io'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">jcenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span><span class=\"token string\">''</span>\n  implementation <span class=\"token interpolation-string\"><span class=\"token string\">\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"</span></span>\n  implementation <span class=\"token interpolation-string\"><span class=\"token string\">\"com.gitlab.aberrantfox:Kutils:0.9.17\"</span></span>\n<span class=\"token punctuation\">}</span>\n\ncompileKotlin <span class=\"token punctuation\">{</span>\n  kotlinOptions<span class=\"token punctuation\">.</span>jvmTarget <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"1.8\"</span></span>\n<span class=\"token punctuation\">}</span>\ncompileTestKotlin <span class=\"token punctuation\">{</span>\n  kotlinOptions<span class=\"token punctuation\">.</span>jvmTarget <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"1.8\"</span></span>\n<span class=\"token punctuation\">}</span>\n\nsourceSets <span class=\"token punctuation\">{</span>\n  main<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>srcDirs <span class=\"token operator\">+=</span> <span class=\"token string\">'src/main/kotlin/'</span>\n  test<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>srcDirs <span class=\"token operator\">+=</span> <span class=\"token string\">'src/test/kotlin/'</span>\n<span class=\"token punctuation\">}</span>\n\njar <span class=\"token punctuation\">{</span>\n  manifest <span class=\"token punctuation\">{</span>\n    attributes <span class=\"token interpolation-string\"><span class=\"token string\">\"Main-Class\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"BotKt\"</span></span>\n  <span class=\"token punctuation\">}</span>\n\n  from <span class=\"token punctuation\">{</span>\n    configurations<span class=\"token punctuation\">.</span>compile<span class=\"token punctuation\">.</span>collect <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">zipTree</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nshadowJar <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">archiveName</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"bot.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">extension</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"dockerfile\" style=\"position:relative;\"><a href=\"#dockerfile\" aria-label=\"dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Dockerfile</code></h3>\n<p>The <code class=\"language-text\">Dockerfile</code> is a little more interesting as it makes use of <a href=\"https://docs.docker.com/v17.09/engine/userguide/eng-image/multistage-build/\">multi-stage builds</a> to create a minimal Docker image.</p>\n<p>Our first image layer uses the official gradle images. We will label this layer as <code class=\"language-text\">builder</code>. In this layer, our goal is to create the jar file that will contain all our dependencies. We first access the image as the root user and start with our working directory labelled as <code class=\"language-text\">/builder</code>. We then add all of our files into the working directory and finally, we construct the fat jar using the <code class=\"language-text\">gradle shadowJar</code> command.</p>\n<p>Then, we create another layer which will be the final layer that goes into the image. We first use the official Alpine linux image for OpenJDK 8. Then we create a working directory for our application labelled <code class=\"language-text\">/app</code>. Then we copy our fat jar from the <code class=\"language-text\">builder</code> layer to the our home directory. As soon as we are done, we then run the command to execute our fat jar and it will cause the Discord bot to launch.</p>\n<p>Using Discord allows us to remain Gradle and Java version agnostic. This <code class=\"language-text\">Dockerfile</code> was taken and modified from the following article found <a href=\"https://www.richyhbm.co.uk/posts/kotlin-docker-spring-oh-my/\">here.</a></p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-docker line-numbers\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> gradle:5.6.1-jdk8 <span class=\"token keyword\">AS</span> builder</span>\n<span class=\"token instruction\"><span class=\"token keyword\">USER</span> root</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /builder</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ADD</span> . /builder</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> gradle shadowJar</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> openjdk:8-jre-alpine</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /builder/build/libs/bot.jar .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"java\"</span>, <span class=\"token string\">\"-jar\"</span>, <span class=\"token string\">\"bot.jar\"</span>]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"herokuyml\" style=\"position:relative;\"><a href=\"#herokuyml\" aria-label=\"herokuyml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">heroku.yml</code></h3>\n<p>The <code class=\"language-text\">heroku.yml</code> file contains the configuration needed for Heroku to run your application. In that sense, it is similar to the traditional <code class=\"language-text\">Procfile</code> that is provided to Heroku applications.</p>\n<p>In this scenario, we don't need to use an elaborate <code class=\"language-text\">heroku.yml</code> file, all we need is to specify that the worker dyno will be based off the instructions of the <code class=\"language-text\">Dockerfile</code> and that's all.</p>\n<p>If you do need to include information like addons and build steps, you can feel free to do so through the use of the additional properties within the configuration file. More information can be found <a href=\"https://devcenter.heroku.com/articles/build-docker-images-heroku-yml\">here.</a></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">worker</span><span class=\"token punctuation\">:</span> Dockerfile</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"Heroku x Docker x Discord bot x Kotlin","date":"31 August 2019","description":"Deploying a JVM-based Discord bot through the Docker integration with Heroku","tags":["tutorial","guide","Kotlin","Heroku","Discord bot","Docker","deployment"]},"fields":{"slug":"/blog/posts/heroku-x-docker-x-discord-bot-x-kotlin"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/blog/posts/lessons-from-meetup"},"frontmatter":{"title":"Lessons from Meetup (and Docker)","published":true}}},{"node":{"fields":{"slug":"/blog/posts/using-delegate-properties"},"frontmatter":{"title":"Applications of Kotlin's delegate properties","published":true}}}]}},"pageContext":{"slug":"/blog/posts/heroku-x-docker-x-discord-bot-x-kotlin","next":"/blog/posts/lessons-from-meetup","prev":"/blog/posts/using-delegate-properties"}},"staticQueryHashes":["2068778362","2207116114"]}