{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/posts/lessons-on-software-release",
    "result": {"data":{"markdownRemark":{"html":"<p>Oh boy, I screwed up bad, like <em>really</em> badly. Ok ok, let's go back and see where it all began. I've learnt countless\nlessons from this and I hope you (reader) will too if you're developing your own software.</p>\n<h2 id=\"story-time\" style=\"position:relative;\"><a href=\"#story-time\" aria-label=\"story time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Story time!</h2>\n<p>2 months ago, I embarked on a journey to write a markdown to PDF converter, called\n<a href=\"https://omnius-project.github.io/kMD2PDF\">kMD2PDF</a>. The initial architecture was developed such that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">.md file -> .html file + .css styling -> .pdf</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>In order to facilitate this system, I used 2 libraries:</p>\n<ol>\n<li><code class=\"language-text\">commonmark-java</code> - this facilitated with the <code class=\"language-text\">.md -> .html</code> conversion</li>\n<li><code class=\"language-text\">flyingsaucer</code> - this facilitated with the <code class=\"language-text\">.html -> .pdf</code> conversion</li>\n</ol>\n<p>In between, I used my own code to create a style DSL to generate the CSS styling. This system worked nicely as I was\nable to create an easy to use API for developers using this library.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> document <span class=\"token operator\">=</span> <span class=\"token function\">MarkdownDocument</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"~/Desktop/README.md\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> convert <span class=\"token operator\">=</span> markdownConverter <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">document</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> \n  converter<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"failure-to-research\" style=\"position:relative;\"><a href=\"#failure-to-research\" aria-label=\"failure to research permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Failure to research</h3>\n<p><strong>However,</strong> I made several big oversights. I failed to plan that the libraries I used were severely limited in what\nthey could offer. For instance, <code class=\"language-text\">commonmark-java</code> does not support task list items, even as an extension and in order\nto implement this feature, I had to create a custom <code class=\"language-text\">NodeRenderer</code> that would convert bullet lists to task list items\nif necessary. Then I realised that because I overrode the default rendering behavior of the bullet lists, I no longer\ncould create nested lists, so I had to remedy that myself and soon, the project became a bunch of band-aids stuck on\ntop of the library and it caused the project to steer into a direction of just bug fix upon bug fix, as I attempted to\nintroduce features into a tightly-coupled system. This made for an incredibly hard time working on the library as I was\nde-motivated to implement features since they would result in a mess.</p>\n<p>Worst still, as I researched more libraries for handling markdown parsing, I noticed that there were libraries like\nFlexmark that <em>did</em> provide the support for the features I wanted such as task lists without requiring a lot of hacky\nwork to be performed to the existing library.</p>\n<p>Similarly, a big hurdle I had to cross with flyingsaucer was getting HTML5 xml code to render as the library required\nonly XML or XHTML documents. This was a huge bottleneck because now some elements render incorrectly and others\nrequire even longer HTML that isn't always necessary. That's where I discovered OpenHTMLToPDF, which had a similar API\nto flyingsaucer but it allowed for HTML5 code and it doesn't constrict users by forcing them to use XHTML (for the\nuninitiated, XHTML is a stricter form of HTML, where single-enclosed tags are not permitted, rather, every tag must be\nclosed off with an ending tag).</p>\n<p>This failure to plan ahead and research properly made my life hell as I spent most of my time fixing issues I created\nfor myself.</p>\n<h3 id=\"over-committing\" style=\"position:relative;\"><a href=\"#over-committing\" aria-label=\"over committing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Over committing</h3>\n<p>Another issue I had stupidly created for myself is over-committing to creating a huge feature push. Initially, after\nreleasing version 0.1.2, I started work on version 0.2.0 - where many new features would come, along with a set of\nchanges to the existing API to improve the lives of developers. But... that's where I failed to realise that I had\nbitten off more than I could chew.</p>\n<p>For an entire month, I focussed my efforts on trying to make version 0.2.0 feature complete. And within this period of\ntime, the stable version of the library never once got updated. This spelt bad news for those who are using 0.1.2 as\nthey are waiting for over a month for a newer library, whilst they're stuck with a bug-filled library. It also meant\nthat I would burn out quickly working on the library as I tried pushing to complete the features by an arbitrary\ndeadline.</p>\n<p>This caused me to be extremely stressed when users of the library would hound me for changes. However, during this\nmonth, I did learn a lot about Kotlin and software development so it wasn't a complete waste of time. I just know it\ncould have been so much better and smoother.</p>\n<p>This is where I also begin to see the value of Agile development, where we should break up the development into deliverables across weeks to reduce the workload and to improve the end user experience.</p>\n<h3 id=\"no-testing\" style=\"position:relative;\"><a href=\"#no-testing\" aria-label=\"no testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No testing</h3>\n<p>An area lacking in the library is unit testing. As the markdown can have many corner cases, it's hard to cater to each\nof these. The lack of unit tests meant that the bugs I encounter are always by accident, rather than the result of\nmethodical checking and testing to ensure that nothing slips the radar.</p>\n<p>Backtracking to unit test everything is also a pain as by this point, I would have forgotten about some of the classes.</p>\n<h2 id=\"learning-points\" style=\"position:relative;\"><a href=\"#learning-points\" aria-label=\"learning points permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Learning points</h2>\n<p>So what exactly did I take away from this experience and how will I be improving my approach. I've learnt to be more\nmethodical with my research before starting a project, I should carefully scope for the best libraries and options\navailable for the job. I've also come to realise just how key portioning work and creating frequent deliverables is to\ndeveloping good software. Finally, I've learnt to use TDD or at least, unit test my code as I write them, rather than\nleaving it till the last minute.</p>\n<p>So what exactly does this mean for kMD2PDF? Well, I'll begin by announcing several changes to my workflow. First and\nforemost, I'll be porting my codebase to use Flexmark and OpenHTMLToPDF over the next few releases, so that's exciting!\nSecondly, I'll shorten the release cycle to have new versions of the library be released every 2 weeks where the\nversioning will go from <code class=\"language-text\">0.2.0</code> to <code class=\"language-text\">0.2.1</code> etc. Each release will contain a few features and fixes and the goal is to\nmake the library stable and ready to use as frequently as possible. Lastly, I'll begin to rolling out a suite of unit\ntests for the codebase. I'll adopt TDD in my workflow and hopefully, I can reach > 80% code coverage before version\n1.0.0.</p>\n<p>Whilst I'm incredibly frustrated about my set backs, I will not allow them to hinder the development and progress of\nthe library and with a new found resolve to achieve better things, I'll be taking on each new challenge with pride. I\nhave also greatly enjoyed the past month learning various skills and practicing Kotlin.</p>\n<p>If you're curious about the library, it can be found <a href=\"https://github.com/omnius-project/kMD2PDF\">here.</a></p>","frontmatter":{"title":"Lessons on software release","date":"03 April 2019","description":"Lessons about software development and release from developing kMD2PDF - a markdown to PDF file converter","tags":["reflection","Kotlin","markdown","PDF","converter","software engineering","kMD2PDF"]},"fields":{"slug":"/blog/posts/lessons-on-software-release"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/blog/posts/national-data-science-challenge-2019"},"frontmatter":{"title":"Concluding the National Data Science Challenge 2019","published":true}}},{"node":{"fields":{"slug":"/blog/posts/porting-to-flexmark"},"frontmatter":{"title":"Porting to FlexMark","published":true}}}]}},"pageContext":{"slug":"/blog/posts/lessons-on-software-release","next":"/blog/posts/porting-to-flexmark","prev":"/blog/posts/national-data-science-challenge-2019"}},
    "staticQueryHashes": ["2068778362","2207116114"]}