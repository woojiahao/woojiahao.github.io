{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/utils/general.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.module.css","webpack:///./src/pages/blog.module.css","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/pages/blog.js"],"names":["children","className","layoutStyles","layout","to","getTitle","slug","title","parts","split","defaultTitle","length","replace","loader","enqueue","React","createContext","module","exports","m","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","posts","data","allMarkdownRemark","edges","map","post","node","fields","frontmatter","ttr","timeToRead","timeToReadText","blogStyles","blogCard","subtitle","date","excerpt","query"],"mappings":"2FAAA,0DAIe,oBAAEA,EAAF,EAAEA,SAAF,OACb,yBAAKC,UAAWC,IAAaC,QAC3B,gCACE,kBAAC,IAAD,CAAMC,GAAG,KACP,2DAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,oBAAT,qBAGHJ,EACD,4G,8FClBSK,EAAW,SAACC,EAAMC,GAC7B,IAAMC,EAAQF,EAAKG,MAAM,KACnBC,EAAeF,EAAMA,EAAMG,OAAS,GAAGC,QAAQ,IAAK,KAC1D,OAAOL,GAASG,I,kCCHlB,sGAcyBG,QAAOC,QAELC,IAAMC,cAAc,K,qBCf/CC,EAAOC,QAAU,CAAC,OAAS,iC,qBCA3BD,EAAOC,QAAU,CAAC,SAAW,gCAAgC,MAAQ,4BAA4B,SAAW,+BAA+B,QAAU,gC,qBCDrJ,IAAsBC,EAKpBF,EAAOC,SALaC,EAKWC,EAAQ,UALRD,EAAEE,SAAYF,G,wFCsBhCG,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV,O,kCCPX,+HAMe,sBAAa,IACpBC,EADmB,EAAVC,KACIC,kBAAkBC,MACrC,OACE,kBAAC,IAAD,KACGH,EAAMI,KAAI,YAAmB,IAAXC,EAAU,EAAhBC,KACL3B,EAAQF,YAAS4B,EAAKE,OAAO7B,KAAM2B,EAAKG,YAAY7B,OAEpD8B,EAAMJ,EAAKK,WACXC,EAAiBN,EAAKK,YAAc,EAAOD,EAA1B,UAA4CA,EAA5C,WAEvB,OACE,yBAAKpC,UAAWuC,IAAWC,UACzB,kBAAC,IAAD,CAAMrC,GAAI6B,EAAKE,OAAO7B,MACpB,wBAAIL,UAAWuC,IAAWjC,OAAQA,IAEpC,yBAAKN,UAAWuC,IAAWE,UACzB,4BAAKT,EAAKG,YAAYO,MACtB,wBAAI1C,UAAWuC,IAAWF,YAAaC,IAEzC,uBAAGtC,UAAWuC,IAAWI,SAAUX,EAAKW,eAQ7C,IAAMC,EAAK","file":"component---src-pages-blog-js-efe132b5a0e2c243a552.js","sourcesContent":["import React from \"react\"\nimport layoutStyles from \"./layout.module.css\"\nimport {Link} from \"gatsby\"\n\nexport default ({children}) => (\n  <div className={layoutStyles.layout}>\n    <header>\n      <Link to=\"/\">\n        <h3>A Programmer's Perspective</h3>\n      </Link>\n      <nav>\n        <Link to=\"/blog\">Blog</Link>\n        <Link to=\"/projects\">Projects</Link>\n        <Link to=\"/about\">About Me</Link>\n        <Link to=\"/recommendations\">Recommendations</Link>\n      </nav>\n    </header>\n    {children}\n    <footer>\n      Copyright &copy; 2020. A Programmer's Perspective is built with Gatsby.js.\n    </footer>\n  </div>\n)\n","export const getTitle = (slug, title) => {\n  const parts = slug.split(\"/\")\n  const defaultTitle = parts[parts.length - 2].replace(\"-\", \" \")\n  return title || defaultTitle\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"layout-module--layout--WT_lX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blogCard\":\"blog-module--blog-card--39d9t\",\"title\":\"blog-module--title--TP5l-\",\"subtitle\":\"blog-module--subtitle--xfOH7\",\"excerpt\":\"blog-module--excerpt--pRXNr\"};","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport Layout from \"../components/layout\"\nimport {graphql, Link} from \"gatsby\"\nimport blogStyles from \"./blog.module.css\"\nimport {getTitle} from \"../utils/general\"\n\nexport default ({data}) => {\n  const posts = data.allMarkdownRemark.edges\n  return (\n    <Layout>\n      {posts.map(({node: post}) => {\n        const title = getTitle(post.fields.slug, post.frontmatter.title)\n\n        const ttr = post.timeToRead\n        const timeToReadText = post.timeToRead <= 1 ? `${ttr} minute` : `${ttr} minutes`\n\n        return (\n          <div className={blogStyles.blogCard}>\n            <Link to={post.fields.slug}>\n              <h1 className={blogStyles.title}>{title}</h1>\n            </Link>\n            <div className={blogStyles.subtitle}>\n              <h2>{post.frontmatter.date}</h2>\n              <h2 className={blogStyles.timeToRead}>{timeToReadText}</h2>\n            </div>\n            <p className={blogStyles.excerpt}>{post.excerpt}</p>\n          </div>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(filter: { frontmatter: { published: { eq: true } } }, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM YYYY\")\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}